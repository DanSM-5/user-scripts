#!/usr/bin/env bash

# Using ':' for visible debug comments
[[ -v debug ]] && set -x

# Common chrome/chromium location
# mac
#   '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
#   '/Applications/Chromium.app/Contents/MacOS/Chromium'
#
# windows gitbash
#   '$HOME/AppData/Local/Chromium/Application/chrome.exe'
#   '/c/Program Files/Google/Chrome/Application/chrome.exe'
#
# windows wsl
#   '/mnt/c/Users/[username]/AppData/Local/Chromium/Application/chrome.exe'
#   '/mnt/c/Program Files/Google/Chrome/Application/chrome.exe'

# Disable security flags if needed (all flags are required!)
#   --disable-web-security
#   --user-data-dir=/tmp/tmp-dev-dir
#   --disable-site-isolation-trials

: :: 'Variable declaration'
version="1.2.0"

# Using linux default
chromium="${CHROMIUM:-/usr/bin/chromium-browser}"
device_ip="${SAMSUNG_DEVICE_IP}"
# Open browser web security disabled
disable_web_security="${DISABLE_WEB_SECURITY:-false}"

# Device to connect
device_id=""
tmp_dir_name="tmp-dev-dir"

# Serial is usually ip + default port
serial_number="$device_ip:26101"

starting_location="$(pwd)"
# home_location="$HOME"
pathid=""
tizen_tmp=""

# Helper functions
get_temp_dir () {
  echo "/tmp/$tmp_dir_name"
}

handle_wsl_path () {
  : :: 'Empty function'
}

is_command () {
  command -v "$1" &> /dev/null
}

is_in_path () {
  type -P "$1" &> /dev/null
}

# Detect windows
if [[ "$(cat /proc/version 2> /dev/null)" =~ (WSL|Microsoft|microsoft|MSYS|MINGW) ]]; then
  # It is running on windows

  # Create function to call cmd.exe
  case $(uname) in 
    Linux*) # WSL

      # If using WSL, the tizen command may be a batch script if running the windows
      # version. That version will cause command prompt (cmd.exe) to default to
      # the system32 directory if the script is called from the linux filesystem
      # which will cause an error. It is better to always default to the windows filesystem
      # as both tizen script versions (linux and windows) will support starting in the windows filesystem.
      echo ""
      echo "WSL Detected. Moving operation to the windows filesystem!"
      echo ""

      : :: 'Creating a wrapper to cmd.exe for WSL'
      cmd () {
        cmd.exe /c "$@"
      }

      if ! is_command 'tizen'; then
        : :: 'Creating a wrapper for tizen command'
        # Create temporal wrapper for tizen
        tizen () {
          cmd tizen "$@"
        }
      fi

      if ! is_command 'sdb'; then
        : :: 'Creating a wrapper for sdb command'
        # Create temporal wrapper for sdb
        sdb () {
          cmd sdb "$@"
        }
      fi

      # Set tizen_tmp directory to allow building unsing windows or linux commands tizen and sdb.
      # This is a workaround for CMD.exe not supporting UNC paths E.g. "\\wsl.localhost\Ubuntu"
      # Using pushd/popd workarounds doesn't play very nice for starting processes.
      handle_wsl_path () {
        : :: 'Handling paths for WSL'
        local path="$1"
        local temp="$(wslpath $(cmd "echo %TEMP%" | sed -e 's/[[:space:]]*$//'))/tizen-help"
        local base="$(basename "$path")"
        pathid="$(uuidgen)"
        tizen_tmp="$temp/$pathid"
        # home_location="$(wslpath $(cmd "echo %USERPROFILE%" | sed -e 's/[[:space:]]*$//'))"
        # Clean temporal directory
        trap "rm -rf -- '$tizen_tmp' 2> /dev/null" EXIT

        # Cleanup
        if [ -d "$tizen_tmp" ]; then
          rm -rf "$tizen_tmp"
        fi

        if [ -f "$path" ]; then
          # Copy file
          : :: "Target $1 is a file"

          # Ensure temp directory
          mkdir -p "$tizen_tmp"
          cp "$path" "$tizen_tmp"
        elif [ -d "$path" ]; then
          # Make and copy dir
          : :: "Target $1 is a directory"

          tizen_tmp="$tizen_tmp/$base"
          mkdir -p "$tizen_tmp"
          cp -r "$path/"* "$tizen_tmp"
        fi
      }

      ;;
    *NT*) # Git bash (MINGW/MSYS)
      : :: 'Add uuidgen function for MINGW/MSYS'
      uuidgen () {
        od -x /dev/urandom | head -1 | awk '{OFS="-"; print $2$3,$4,$5,$6,$7$8$9}'
      }

      : :: 'Creating a wrapper to cmd.exe for MSYS'
      cmd () {
        # NOTICE: if automatic path conversion is disabled (variable below)
        # "MSYS_NO_PATHCONV='1'"
        # "MSYS2_ARG_CONV_EXCL='*'"
        # CMD below won't terminate. You need to change '//c' to '/c'
        cmd.exe //c "$@"
      }

      # Create temporal wrappers for tizen and sdb

      : :: 'Creating a wrapper for tizen command'
      tizen () {
        cmd tizen "$@"
      }

      : :: 'Creating a wrapper for sdb command'
      sdb () {
        cmd sdb "$@"
      }
      ;;
  esac

  # Override for windows paths
  get_temp_dir () {
    # Handle backslash, scape special characters but allow non escaped spaces and remove trailing blanc characters (\r\n)
    local tmp="$(printf "%q" $(cmd "echo %TEMP%" | sed 's/\\ / /g' | sed -e 's/[[:space:]]*$//'))"
    echo "$tmp/$tmp_dir_name"
  }
fi

print_version () {
  echo "tizen-help - v$version"
}

tizen_help () {
  while IFS= read -r line; do
		printf "  %s\n" "$line"
	done <<-EOF

  Tizen helper for CLI use - v$version

  Commands:
    - install       > Install the app provided [wgt-path] in the target tv.
                      Optional device-ip to target action.
    - uninstall     > Uninstall the app in the tv. It accepts both [app-id] or [wgt-path].
                      Optional device-ip to target action.
    - debug         > Start a debug session of the app that matches the [app-id] or [wgt-path]
                      If CHROMIUM variable exitst, it will launch it the browser
                      If DISABLE_WEB_SECURITY is "true", it will use disable-web-security flag.
                      Optional device-ip to target action.
    - build         > Builds a tizen project in the specified directory
                      and outs the results in .buildResult located in the specified directory.
    - package       > Package a tizen app (wgt) in the directory specified.
    - connect       > Connect to the TV using the provided IP or the IP in SAMSUNG_DEVICE_IP variable.
    - disconnect    > Disconnect from the TV using the provided IP or the IP in SAMSUNG_DEVICE_IP variable.
    - appid         > Show the [app-id] from a given [wgt] file.
    - repackage     > Unpack and repack a wgt using the active signing profile.
    - profile       > Sets a profile for signing. If no profile is provided, a menu will open to choose
                      from current profiles. If fzf is available, it will be use to display the menu.
    - info          > Show current value of CHROMIUM and SAMSUNG_DEVICE_IP variables
                      as well as the result of "tizen version" and "sdb version".
    - syntax        > Show syntax help of common uses cases of tizen cli.
    - help          > Prints this message.
    - version       > Show script version.

	Usage:
    ${0##*/} install [ wgt-path ] [ device-ip ]
    ${0##*/} uninstall [ app-id | wgt-path ] [ device-ip ]
    ${0##*/} debug [ app-id | wgt-path ] [ device-ip ]
    ${0##*/} build [ path-to-build ]
    ${0##*/} package [ path-to-package ]
    ${0##*/} connect [device-ip]
    ${0##*/} disconnect [device-ip]
    ${0##*/} appid [ wgt-path ]
    ${0##*/} repackage [ wgt-path ]
    ${0##*/} profile [ profile-name ]
    ${0##*/} info
    ${0##*/} syntax
    ${0##*/} help
    ${0##*/} version

	Options:
    -h | --help                   Print this message
    -v | --version                Print script version

  Environment variables:
    - CHROMIUM                    Path of the browser executable
    - SAMSUNG_DEVICE_IP           IP Address of the device to connect to
    - DISABLE_WEB_SECURITY        Start the browser with web security disabled [ true | false ]

  Debug errors with the script:
    > Set a debug environment variable to enable 'set -x' logs
    $ debug=true ${0##*/} info

  Examples of use:
    # Build will always create a .buildResult directory
    $ ${0##*/} build ./build

    # Package your build in a wgt. Current signing profile will be used.
    $ ${0##*/} package ./build/.buildResult

    # Install can accept a second argument to target a device. Overrides SAMSUNG_DEVICE_IP env variable.
    $ ${0##*/} install ./build/.buildResult/MY_APP.wgt

    # Debug can accept a second argument to target a device. Overrides SAMSUNG_DEVICE_IP env variable.
    $ ${0##*/} debug ./build/.buildResult/MY_APP.wgt

    # Uninstall can accept a second argument to target a device. Overrides SAMSUNG_DEVICE_IP env variable.
    $ ${0##*/} uninstall ./build/.buildResult/MY_APP.wgt

EOF
}

syntax_help () {
  while IFS= read -r line; do
		printf "  %s\n" "$line"
	done <<-EOF
  Tizen syntax:

    Security profiles:
      Show profiles:
      - tizen security-profiles list
      Set a profile:
      - tizen security-profiles set-active -n [profile-name]

    Build:
      - tizen build-web -out [out directory] [-- directory path]

    Package:
      If specific cert required:
      - tizen security-profiles add -n [profile-name] -a [author.p12 path] -p [password]

      - tizen package -t wgt [-s profile-name] [-- directory path] 

    Connect:
      - sdb connect [device-ip]
      - sdb disconnect [device-ip]

    Server:
      - sdb start-server
      - sdb kill-server

    Install: (use wgt location)
      - tizen install -n [wgt-path]
      - tizen uninstall -p [app-id]

    Debug:
      - sdb shell 0 debug [app-id]
      - sdb forward tcp:[port] tcp:[port]

    Restart app (javascript):
      - tizen.application.launch("[app-id]")
EOF
}

open_brwoser () {
  local url="$1"

  echo ""
  echo "opening chromium"

  if [ "$disable_web_security" = true ]; then
    echo ""
    echo "Starting --disable-web-security session"
    local temp_dir="$(get_temp_dir)"

    : :: 'Browser session is located in the temporal directory $temp_dir'

    mkdir -p "$temp_dir"

    "$chromium" \
      --disable-web-security \
      --user-data-dir="$temp_dir" \
      --disable-site-isolation-trials \
      "$url"
  else
    "$chromium" "$url"
  fi

}

tizen_build () {
  local location="$1"
  if ! [ -d "$location" ]; then
    die "Invalid path provided"
  fi

  if [ -d "$tizen_tmp" ]; then
    cd "$tizen_tmp"
    tizen build-web -- . -out .buildResult
    cd "$starting_location"

    if [ -d "$1/.buildResult" ]; then
      rm -rf "$1/.buildResult"
    fi

    cp -r "$tizen_tmp/.buildResult" "$1/.buildResult"
  else
    tizen build-web -- "$location" -out .buildResult
  fi
}

tizen_package () {
  local location="$1"
  if ! [ -d "$location" ]; then
    die "Invalid path provided"
  fi

  if [ -d "$tizen_tmp" ]; then
    cd "$tizen_tmp"
    tizen package -t wgt -- .
    cd "$starting_location"

    if [ -f "$1"/*.wgt ]; then
      rm -rf "$1"/*.wgt
    fi

    cp "$tizen_tmp/"*.wgt "$1"
  else
    tizen package -t wgt -- "$location"
  fi
}

tizen_repackage () {
  local location="$1"

  : :: "Repackage file location: $location"
  if ! [ -f "$location" ]; then
    die "Input is not a valid file"
  fi

  : :: "Prepare temporal location"
  tizen_tmp="${tizen_tmp:-$(mktemp -d)}"
  local temp_unzip_dir="$tizen_tmp/repackage"
  trap "rm -rf -- '$temp_unzip_dir' &> /dev/null" EXIT

  : :: "Unzip original build"
  unzip "$location" -d "$temp_unzip_dir"

  : :: "Make new signed build"
  cd "$temp_unzip_dir"
  tizen package -t wgt -- .

  local repacked_file="${1%.*}.repacked.wgt"

  : :: "Go back to starting location"
  cd "$starting_location"
  : :: "Copy new file $repacked_file"
  cp "$temp_unzip_dir/"*.wgt "$repacked_file"
}

show_current () {
  echo "Environment:"
  echo "Chromium: $chromium"
  echo "Device IP: $device_ip"
  echo "Disable web security: $disable_web_security"
  echo ""
  echo "tizen version output:"
  tizen version
  echo ""
  echo "sdb version output:"
  sdb version
}

start_connection () {
  device_ip="${1:-$SAMSUNG_DEVICE_IP}"

  if [ -z "$device_ip" ]; then
    die "Cannot proceed without a valid IP"
  fi

  serial_number="$device_ip:26101"

  echo ""
  echo Connecting to "$device_ip"...
  sdb connect $device_ip
}

close_connection () {
  device_ip="${1:-$SAMSUNG_DEVICE_IP}"

  if [ -z "$device_ip" ]; then
    die "Cannot proceed without a valid IP"
  fi

  serial_number="$device_ip:26101"

  if [ -z "$device_id" ]; then
    set_device_id
  fi

  echo ""
  echo Disconnection from device $device_id at $device_ip...
  sdb disconnect $device_ip
}

start_deamon () {
  echo ""
  echo Starting sdb server...
  sdb start-server
}

end_deamon () {
  echo ""
  echo Stopping sdb server...
  sdb kill-server
}

set_device_id () {
  echo ""
  echo Setting device id
  device_id=$(sdb devices | awk -v serial="$serial_number" '{ if($1 == serial) { print $3 } }' | tr -d '[:space:]')
  echo DeviceID: $device_id
}

# display an error message to stderr (in red)
err () {
	printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
}

#display error message and exit
die () {
	err "$*"
	exit 1
}

get_app_id () {
  local app_id=''

  # If input provided is a path
  if [ -f "$1" ] || [[ "$1" =~ .wgt ]]; then
    app_id="$(unzip -p "$1" config.xml | sed -nr "s/.*tizen:application .*id=\"([a-zA-Z0-9\.]*)\" .*/\1/p")"
  else
    app_id="$1"
  fi

  if [ -z "$app_id" ]; then
    die "Invalid app id provided"
    return
  fi

  echo "$app_id"
}

show_app_id () {
  if ! [ -f "$1" ]; then
    die "Invalid file provided"
  fi

  local app_id="$(get_app_id $1)"

  if [ -z "$app_id" ]; then
    die "Unable to get app id"
  fi

  echo ""
  echo "The app id of '$1' is: $app_id"
}

tizen_install () {
  local file_name="$1"
  if [ -z "$device_id" ]; then
    set_device_id
  fi

  if [ -d "$tizen_tmp" ]; then
    cd "$tizen_tmp"
    tizen install -n "$(basename "$file_name")" -t "$device_id"
    cd "$starting_location"
  else
    tizen install -n "$file_name" -t "$device_id"
  fi
}

tizen_uninstall () {
  local app_id="$(get_app_id $1)"
  if [ -z "$device_id" ]; then
    set_device_id
  fi

  echo ""
  echo "The uninstall command may not work on old devices"

  tizen uninstall -p "$app_id" -t "$device_id"
}

tizen_debug () {
  if [ -z "$device_ip" ]; then
    die "Cannot proceed without a valid IP"
  fi

  if [ -z "$device_id" ]; then
    set_device_id
  fi

  local app_id="$(get_app_id $1)"

  echo ""
  echo "Start debugging for app id $app_id"

  # Launch sdb debug and capture port
  local debug_port=$(sdb -s "$serial_number" shell 0 debug "$app_id" | awk '{ print $11 }' | tr -d '[:space:]')
  local url="http://$device_ip:$debug_port"

  if [ -z "$debug_port" ]; then
    die "Unable to launch the app $app_id in debug mode. Please verify that the app id is valid."
  fi

  # Connect tv debug port to pc port
  sdb -s "$serial_number" forward tcp:$debug_port tcp:$debug_port

  echo ""
  echo Debug port available on "$url"

  echo ""
  echo "You can restart your app in the console with:"
  echo "> tizen.application.launch('$app_id')"
  echo "NOTE: The function may not work on old devices."

  if [ -f "$chromium" ]; then
    open_brwoser "$url"
  fi
}

choose_profile () {
  local profiles_strs="$(tizen security-profiles list | sed '1d;2d')"
  # Associative array (key base instead of index)
  local declare -A profiles=()
  local count=0
  local profile=''
  local selection=''

  while IFS= read -r profile_str; do
    profile="$(echo "${profile_str/ O}" | sed -E 's/[[:space:]]*$//')"
    profiles[$count]="$profile"

    # Show currently active profile (Includes a "O" at the end).
    echo "$count: $profile_str"
    ((count++))
  done <<< "$profiles_strs"

  echo "Enter the number of the profile or 'q' to quit:"
  read -p 'Profile: ' selection

  if [ "$selection" = 'q' ]; then
    : :: "No profile selected."
    return
  fi

  : :: "Selected profile: $selection"

  profile=''
  profile="${profiles[$selection]}"

  if [ -z "$profile" ]; then
    die "Selected profile '$selection' is invalid."
    return 1
  fi

  tizen security-profiles set-active -n "$profile"
}

choose_profile_fzf () {
  local profile="$(tizen security-profiles list | sed '1d;2d' | fzf)"
  
  : :: "Selected profile: $profile"
  if [ -z "$profile" ]; then
    : :: "No profile selected."
    return
  fi

  tizen security-profiles set-active -n "$(echo "${profile/ O}" | sed -E 's/[[:space:]]*$//')"
}

change_profile () {
  local profile="$1"

  if [ -n "$profile" ]; then
    : :: "Setting Profile: $1"
    tizen security-profiles set-active -n "$profile" 
    return "$?"
  fi

  if is_command 'fzf'; then
    : :: "Using fzf to select profile"
    choose_profile_fzf
    return
  fi

  choose_profile
}

if [ -f "$2" ] || [ -d "$2" ]; then
  handle_wsl_path "$2" 
fi

: ::: Evaluating args :::
: :: "$@"

case "$1" in
  connect)
    start_deamon
    start_connection "$2"
    ;;
  disconnect)
    if (( $(sdb devices | wc -l) > 2 )); then
      close_connection "$2"
    else
      close_connection "$2"
      end_deamon
    fi
    ;;
  install)
    if [ -n "$3" ]; then
      start_deamon
      start_connection "$3"
    fi

    tizen_install "$2"
    ;;
  uninstall)
    if [ -n "$3" ]; then
      start_deamon
      start_connection "$3"
    fi

    tizen_uninstall "$2"
    ;;
  debug)
    start_deamon
    start_connection "${3:-$device_ip}"
    tizen_debug "$2"
    ;;
  build)
    tizen_build "$2"
    ;;
  package)
    tizen_package "$2"
    ;;
  appid)
    show_app_id "$2"
    ;;
  info)
    show_current
    ;;
  syntax)
    syntax_help
    ;;
  profile)
    change_profile "$2"
    ;;
  repackage)
    tizen_repackage "$2"
    ;;
  -h|--help|help)
    tizen_help
    ;;
  -v|--version|version)
    print_version
    ;;
  *)
    echo
    echo "Invalid command argument '${@}'"
    tizen_help
    ;;
esac

