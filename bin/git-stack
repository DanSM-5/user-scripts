#!/usr/bin/env bash

# Show the difference between the selected branch and master branch
# Stolen from: https://github.com/hankchanocd/git-stack/blob/97fd7ed7090635f4c38681fe8ddd539d2c355273/git-stack

# Color scheme used exclusively in git-fuzzy-commit
export FZF_DEFAULT_OPTS='
  --color hl:33,fg+:214,hl+:33
  --color spinner:208,pointer:196,marker:208
'

# Prevent gitbash issue with xargs when environmet
# is too big. Unsetting LS_COLORS generated by vivid
# which is huge prevents the issue.
export LS_COLORS=""

# Find clipboard utility
copy='true'
if [ "$OS" = 'Windows_NT' ]; then
  # Gitbash
  copy="awk '{ print \$1 }' '{+f}' | clip.exe"
elif [ "$OSTYPE" = 'darwin' ]; then
  copy="awk '{ print \$1 }' {+f} | pbcopy"
# Assume linux if above didn't match
elif [ -n "$WAYLAND_DISPLAY" ] && command -v 'wl-copy' &>/dev/null; then
  copy="awk '{ print \$1 }' {+f} | wl-copy --foreground --type text/plain"
elif [ -n "$DISPLAY" ] && command -v 'xsel' &>/dev/null; then
  copy="awk '{ print \$1 }' {+f} | xsel -i -b"
elif [ -n "$DISPLAY" ] && command -v 'xclip' &>/dev/null; then
  copy="awk '{ print \$1 }' {+f} | xclip -i -selection clipboard"
fi

main () {
  # Check if it's a git repo
  [[ $(git root 2>&1) == 'Not a git repo!' ]] && echo "Not a git repo!" && exit 1

  # Assign master to $branch if not defined yet
  local branch
  [[ -z "$1" ]] && branch='master' || branch=$1

  git-stack () {
    glNoGraph () {
      git log "$branch".. --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"
    }

   # /c/Users/daniel/scoop/shims/delta 
    _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
    _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c \"git show --color=always % | delta\""

    glNoGraph |
      fzf --cycle --no-sort --reverse --tiebreak=index --no-multi \
        --ansi --preview="$_viewGitLogLine" \
        --preview-window 'wrap' \
        --bind 'alt-c:clear-query' \
        --bind 'alt-f:first' \
        --bind 'alt-l:last' \
        --bind 'alt-up:preview-page-up,alt-down:preview-page-down' \
        --bind 'ctrl-^:toggle-preview' \
        --bind 'ctrl-/:change-preview-window(bottom|hidden|)' \
        --bind 'ctrl-s:toggle-sort' \
        --header "enter to view, alt-y to copy hash" \
        --bind "enter:execute:$_viewGitLogLine   | less -R" \
        --bind "alt-y:execute($_gitLogLineToHash | $copy)+bell" \
        --bind "ctrl-y:execute($_gitLogLineToHash | $copy)+bell"
  }

  git-stack
}

fuzzy_select_branch () {
  # Check if it's a git repo
  [[ $(git root 2>&1) == 'Not a git repo!' ]] && echo "Not a git repo!" && exit 1

  result=$(git branch --list |
    fzf --reverse --height=40% --cycle
  )
  branch=$(echo "$result" |
    tr "*" " " |
    xargs # Remove trailing whitespaces
  )

  [[ -n "$branch" ]] && main $branch
}

################ Help ################
usage="usage: $(basename "$0") [<options>]

Compare against master branch with fzf

where:
  -h  show this help text
  -f  fuzzy select a branch to compare with"

############# Parse options ##############
while getopts ':hf' option; do
  case "$option" in
  h)
    echo "$usage"
    exit 0
    ;;
  f)
    fuzzy_select_branch
    exit
    ;;
  :)
    main
    exit
    ;;
  \?)
    printf "illegal option: -%s\n" "$OPTARG" >&2
    echo -e "$usage" >&2
    exit 1
    ;;
  esac
done
shift $((OPTIND - 1))

# Default case when no option provided
main "$@"
