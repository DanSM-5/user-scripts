#!/usr/bin/env bash

# Default mode
mode='log'
open=false
print_patches=false
fullscreen=false
editor="${PREFERRED_EDITOR:-${EDITOR:-vim}}"
history_location="${FZF_HIST_DIR:-$HOME/.cache/fzf-history}"
history_file="$history_location/git-search-commits"
files=()
git_args=''
POSITIONAL_ARGS=()

showHelp () {
  printf "%s\n" "
    Git search in commits or patches

    Synopsis:
      \$ git-search-commits [flags] [search string]

    Description:
      Select a mode for search and interactively search in the logs or the patches
      of the commits. Fzf have two modes, git search (initial) and fuzzy filter to
      narrow on the remaining items available.

    Usage:
      Call \`git-search-commits\` to start interactive search on fzf. Initial query
      can be provided to start with a small result set.
      Target the files you are interested in to narrow the search (see '--file').
      Use ctrl-r to search with git interactively (default mode).
      Use ctrl-f to filter result with fuzzy matches.
      Use ctrl-y to copy hashes to clipboard (require dependencies on linux).

    Modes:
      - log:       Searches through the messages of the commits (--message/-m).
      - regex:     Search through the patches of the commits using regex.
      - string:    Search through the patches of the commits using exact match.

    Dependencies:
      - git
      - fzf
      - delta (optional)

      Linux only. One of the below for clipboard functionality.
      - wl-copy
      - xclip
      - xsel

    Flags:

      -h, --help                   > Print this message.

      -g, --gitargs                > Git arguments. E.g. '--branches --tags'

      -l, --log                    > Search in the log of the commits.

      -s, --string                 > Search in the patches of commits by exact match.

      -r, --regex                  > Search in the patches of commits by regex.

      -m, --mode [mode]            > Set the mode with a string instead of a boolean flag.

      -e, --edit                   > Open the selected commits in your editor (\$EDITOR).

      -f, --file [filename]        > File to use to narrow the search. Can be included multiple times.

      -d, --display                > Show fzf in full screen

      -p, --print                  > Print the hashes on exit

    Arguments:

      Remaining arguments are treated as the initial query for search.
  "
}


# Allow complex regex globs
shopt -s extglob

# Args parsing
# Ref: https://stackoverflow.com/a/14203146
# shellcheck disable=SC2221 disable=SC2222
while [[ $# -gt 0 ]]; do
  case $1 in
    -[gG]|-?(-)[gG]it[aA]rgs)
      git_args="$2"
      shift # past argument
      shift # past value
      ;;
    -[lL]|-?(-)[lL]og)
      mode='log'
      shift # past argument
      ;;
    -[rR]|-?(-)[rR]egex)
      mode='regex'
      shift # past argument
      ;;
    -[sS]|-?(-)[sS]tring)
      mode='string'
      shift # past argument
      ;;
    -[mM]|-?(-)[mM]ode)
      mode="$2"
      shift # past argument
      shift # past value
      ;;
    -[eE]|-?(-)[eE]edit)
      open=true
      shift # past argument
      ;;
    -[dD]|-?(-)[dD]isplay)
      fullscreen=true
      shift # past argument
      ;;
    -[fF]|-?(-)[fF]ile)
      # Store quoted filename
      files+=("'$2'")
      shift # past argument
      shift # past value
      ;;
    -[pP]|-?(-)[pP]rint)
      print_patches=true
      shift # past argument
      ;;
    -[hH]|-?(-)[hH]elp)
      showHelp
      exit 0
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # Positional args are considered urls to download
      shift # past argument
      ;;
  esac
done

# Restore positional arguments
set -- "${POSITIONAL_ARGS[@]}"

# Command formatting
base_command="git log --color=always --oneline --decorate $git_args %s 2>/dev/null"
format_files='%s'

if [[ -n "${files[*]}" ]]; then
  # Process files
  format_files="%s -- ${files[*]}"
fi

# Git command to perform
if [ "$mode" = 'regex' ]; then
  # shellcheck disable=SC2059
  base_command="$(printf "$base_command" "-G $format_files")"
elif [ "$mode" = 'string' ]; then
  # shellcheck disable=SC2059
  base_command="$(printf "$base_command" "-S $format_files")"
else
  mode='log'
  # shellcheck disable=SC2059
  base_command="$(printf "$base_command" "--grep $format_files")"
fi

# Intentional usage of variable in first position of printf
# shellcheck disable=SC2059
source_command="$(printf "$base_command" "'$*'")"
# shellcheck disable=SC2059
reload_command="$(printf "$base_command" '{q}') || true"

# Setup preview
fzf_preview='git show --color=always {1} '
if command -v delta &>/dev/null; then
  fzf_preview="$fzf_preview | delta || true"
else
  fzf_preview="$fzf_preview || true"
fi

# Ensure history location exists
mkdir -p "$history_location"

# Set fullscreen or regular size
if [ "$fullscreen" = 'true' ]; then
  fzf_args=(
    '--bind' 'ctrl-/:change-preview-window(right|hidden|)'
    '--preview-window' 'top,60%,wrap'
  )

  if [ "$OS" = 'Windows_NT' ]; then
    # bug in fzf making fullscreen
    # not recognizing ctrl-/ or ctrl-^
    fzf_args+=('--height' '99%')
  else
    fzf_args+=('--height' '100%')
  fi
else
  fzf_args=(
    '--height' '80%'
    '--bind' 'ctrl-/:change-preview-window(down|hidden|)'
    '--preview-window' 'right,60%,wrap'
  )
fi

# Find clipboard utility
copy='true'
if [ "$OS" = 'Windows_NT' ]; then
  # Gitbash
  copy="awk '{ print \$1 }' '{+f}' | clip.exe"
elif [ "$OSTYPE" = 'darwin' ]; then
  copy="awk '{ print \$1 }' {+f} | pbcopy"
# Assume linux if above didn't match
elif [ -n "$WAYLAND_DISPLAY" ] && command -v 'wl-copy' &>/dev/null; then
  copy="awk '{ print \$1 }' {+f} | wl-copy --foreground --type text/plain"
elif [ -n "$DISPLAY" ] && command -v 'xsel' &>/dev/null; then
  copy="awk '{ print \$1 }' {+f} | xsel -i -b"
elif [ -n "$DISPLAY" ] && command -v 'xclip' &>/dev/null; then
  copy="awk '{ print \$1 }' {+f} | xclip -i -selection clipboard"
fi

help_cat_cmd='cat'
if command -v 'bat' &>/dev/null; then
  help_cat_cmd='bat --color=always --language help --style=plain'
fi

help_cmd="
  $help_cat_cmd <<< '
  Preview window keys:
    ctrl-^: Toggle preview
    ctrl-/: Toggle preview position
    ctrl-s: Toggle sort
    shift-up: Preview up
    shift-down: Preview down
    alt-up: Preview page up
    alt-down: Preview page down

  Modes keys:
    ctrl-r: Interactive git search based on mode
    ctrl-f: Fuzzy filtering current results

  Utility keys:
    ctrl-y: Copy selected hash(es)
    ctrl-o: Exit and print selected hash(es) with \`git show\`
    ctrl-e: Exit and open selected hash(es) in editor
    ctrl-d: Drop selected hash(es) from result

  Cursor keys:
    alt-a: Select all
    alt-d: Deselect all
    alt-f: Go first
    alt-l: Go last
    alt-c: Clear query
  '
"

# Call fzf
mapfile -t commits < <(fzf \
    --accept-nth '{1}' \
    --ansi --cycle --multi \
    --bind 'alt-a:select-all' \
    --bind 'alt-c:clear-query' \
    --bind 'alt-d:deselect-all' \
    --bind 'alt-f:first' \
    --bind 'alt-l:last' \
    --bind 'alt-up:preview-page-up,alt-down:preview-page-down' \
    --bind 'ctrl-^:toggle-preview' \
    --bind 'ctrl-s:toggle-sort' \
    --bind 'shift-up:preview-up,shift-down:preview-down' \
    --bind "change:reload:$reload_command" \
    --bind "ctrl-f:unbind(change,ctrl-f)+change-prompt(FzfFilter> )+enable-search+clear-query+rebind(ctrl-r)" \
    --bind "ctrl-r:unbind(ctrl-r)+change-prompt(GitSearch> )+disable-search+reload($reload_command)+rebind(change,ctrl-f)" \
    --bind "ctrl-y:execute-silent($copy)+bell" \
    --bind "start:reload:$source_command" \
    --expect=ctrl-o,ctrl-e \
    --bind 'ctrl-d:exclude-multi' \
    --bind "alt-h:preview:$help_cmd" \
    --disabled \
    --header "Mode: $mode | alt-h: Help" \
    --history="$history_file" \
    --input-border \
    --layout=reverse \
    --min-height 20 --border \
    --preview "$fzf_preview" \
    --prompt 'GitSearch> ' \
    --query "$*" \
    "${fzf_args[@]}"
)

# If no commits, exit
if [ -z "${commits[1]}" ]; then
  exit
fi

expected_key="${commits[0]}"

print_patches () {
  git show "${commits[@]:1}"
}

open_editor () {
  local tmpfile="$(mktemp)"
  git show "${commits[@]:1}" > "$tmpfile"

  # On (n)vim editor set filetype
  if [[ "$editor" =~ ^n?vim?$ ]]; then
    exec "$editor" -c ":filetype detect" "$tmpfile"
  else
    exec "$editor" "$tmpfile"
  fi
}

if [ "$expected_key" = 'ctrl-o' ]; then
  print_patches
  exit
fi

if [ "$expected_key" = 'ctrl-e' ]; then
  open_editor
  exit
fi

if [ "$print_patches" = true ]; then
  print_patches
  exit
fi

if [ "$open" = true ]; then
  open_editor
  exit
fi

# Print selected hashes
printf '%s\n' "${commits[@]:1}"

