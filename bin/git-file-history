#!/usr/bin/env bash

open=false
fullscreen=false
print_patches=false
git_args=()

showHelp () {
  printf "%s\n" "
    Show the commit history on a file

    Synopsis:
      \$ git-file-history [flags] [file to search]

    Description:
      Show the commit history of a file and preview the patches of that file.

    Usage:
      Call \`git-file-history\` to view the history of commits on a specific file.
      Use ctrl-y to copy hashes to clipboard (require dependencies on linux).
      Use ctrl-a to display the full patch and ctrl-d to display the patch on the specific file (default).

    Note:
      You can pass the path to the file or set it with the -File flag.
      Only last one in the command will be used.

    Dependencies:
      - git
      - fzf
      - delta (optional)
      - fd or find (select file)
      - rg or grep (select file)

      Linux only. One of the below for clipboard functionality.
      - wl-copy
      - xclip
      - xsel

    Flags:

      -h, --help                   > Print this message.

      -a, --all                    > Include all references in the search (tags, branches, etc.)

      -e, --edit                   > Open the selected commits in your editor (\$EDITOR).

      -f, --file [filename]        > File to use for search.

      -d, --display                > Show fzf in full screen

      -p, --print                  > Print the patches on exit

    Arguments:

      Path to the file to check commit history.
  "
}

# Allow complex regex
shopt -s extglob

# Args parsing
# Ref: https://stackoverflow.com/a/14203146
# shellcheck disable=SC2221 disable=SC2222
while [[ $# -gt 0 ]]; do
  case $1 in
    -[aA]|-?(-)[aA]ll)
      git_args+=('--all')
      shift # past argument
      ;;
    -[fF]|-?(-)[fF]ile)
      filename="$2"
      shift # past argument
      shift # past value
      ;;
    -[eE]|-?(-)[eE]edit)
      open=true
      shift # past argument
      ;;
    -[dD]|-?(-)[dD]isplay)
      fullscreen=true
      shift # past argument
      ;;
    -[pP]|-?(-)[pP]rint)
      print_patches=true
      shift # past argument
      ;;
    -[hH]|-?(-)[hH]elp)
      showHelp
      exit 0
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      filename="$1"
      shift # past argument
      ;;
  esac
done

if [ "$fullscreen" = 'true' ]; then
  fzf_args=(
    '--bind' 'ctrl-/:change-preview-window(right|hidden|)'
    '--preview-window' '+{2}-/2,top,60%'
  )

  if [ "$OS" = 'Windows_NT' ]; then
    # Bug in fzf making fullscreen
    # not recognizing ctrl-/ or ctrl-^
    fzf_args+=('--height' '99%')
  else
    fzf_args+=('--height' '100%')
  fi
else
  fzf_args=(
    '--height' '80%'
    '--bind' 'ctrl-/:change-preview-window(down|hidden|)'
    '--preview-window' '+{2}-/2,right,60%'
  )
fi

# Special environment variables to customize internal commands
GFH_FZF_ARGS="${GFH_FZF_ARGS:-}"
GFH_GIT_ARGS="${GFH_GIT_ARGS:-}"
GFH_FD_ARGS="${GFH_FD_ARGS:-}"
GFH_RG_ARGS="${GFH_RG_ARGS:-}"
GFH_BAT_ARGS="${GFH_BAT_ARGS:-}"

for farg in $GFH_FZF_ARGS; do
  fzf_args+=("$farg")
done

if [ -z "$filename" ] || ! [ -f "$filename" ]; then
  # Preview window command
  file_preview="
    LINE={}
    FILE=\$(awk -F: '{ print \$1 }' <<< \"\$LINE\")
    NUMBER=\$(awk -F: '{ print \$2 }' <<< \"\$LINE\")

    if [ -z \"\$NUMBER\" ]; then
      NUMBER=0
    fi

    # set preview command
    if command -v bat &> /dev/null; then
      bat --style='${BAT_STYLE:-numbers}' --color=always --pager=never \
        --highlight-line=\$NUMBER $GFH_BAT_ARGS -- \"\$FILE\"
    else
      cat $GFH_BAT_ARGS -- \"\$FILE\"
    fi
  "

  # Set grep command
  if command -v 'rg' &>/dev/null; then
    grep_command="rg --with-filename --line-number --color=always $GFH_RG_ARGS {q}"
  else
    # grep -h -n --color=always -R
    grep_command="grep --with-filename --line-number --color=always --dereference-recursive $GFH_RG_ARGS {q}"
  fi

  # Set reload command
  if command -v 'fd' &>/dev/null; then
    reload_files="fd --type file --color=always $GFH_FD_ARGS"
  else
    # grep -h -n --color=always -R
    reload_files="find . -type f $GFH_FD_ARGS"
  fi

  filename="$(fzf \
      --ansi --cycle --no-multi \
      --bind 'alt-c:clear-query' \
      --bind 'alt-f:first' \
      --bind 'alt-l:last' \
      --bind 'alt-up:preview-page-up,alt-down:preview-page-down' \
      --bind 'ctrl-^:toggle-preview' \
      --bind 'ctrl-s:toggle-sort' \
      --bind 'ctrl-f:unbind(change,ctrl-f)+change-prompt(Select file> )+enable-search+clear-query+rebind(ctrl-r,alt-r)' \
      --bind 'shift-up:preview-up,shift-down:preview-down' \
      --bind "start:unbind(change)+reload($reload_files)" \
      --bind "alt-r:reload($reload_files)" \
      --bind "change:reload:$grep_command" \
      --bind "ctrl-r:unbind(ctrl-r,alt-r)+change-prompt(Search> )+disable-search+reload($grep_command)+rebind(change,ctrl-f)" \
      --delimiter : \
      --header 'Select a file to search' \
      --input-border \
      --layout=reverse \
      --min-height 20 --border \
      --preview "$file_preview" \
      --prompt 'Select file> ' \
      "${fzf_args[@]}" |
    cut -d':' -f1
  )"
fi

if [ -z "$filename" ]; then
  rbb="$(git config --get-color "" "red black bold")"
  echo "${rbb}You need to provide a file or select one" >&2
  exit
fi

if ! [ -f "$filename" ]; then
  rbb="$(git config --get-color "" "red black bold")"
  echo "${rbb}Cannot find the specified file: $filename" >&2
  exit
fi

editor="${PREFERRED_EDITOR:-${EDITOR:-vim}}"
history_location="${FZF_HIST_DIR:-$HOME/.cache/fzf-history}"
history_file="$history_location/git-file-history"

# Ensure history location exists
mkdir -p "$history_location"


# Find clipboard utility
copy='true'
if [ "$OS" = 'Windows_NT' ]; then
  # Gitbash
  copy="cat '{+f}' | awk '{ print \$1 }' | clip.exe"
elif [ "$OSTYPE" = 'darwin' ]; then
  copy="cat {+f} | awk '{ print \$1 }' | pbcopy"
# Assume linux if above didn't match
elif [ -n "$WAYLAND_DISPLAY" ] && command -v 'wl-copy' &>/dev/null; then
  copy="cat {+f} | awk '{ print \$1 }' | wl-copy --foreground --type text/plain"
elif [ -n "$DISPLAY" ] && command -v 'xsel' &>/dev/null; then
  copy="cat {+f} | awk '{ print \$1 }' | xsel -i -b"
elif [ -n "$DISPLAY" ] && command -v 'xclip' &>/dev/null; then
  copy="cat {+f} | awk '{ print \$1 }' | xclip -i -selection clipboard"
fi

git_command="git log --color=always --oneline --follow ${git_args[*]} $GFH_GIT_ARGS -- %s || true"
source_command="$(printf "$git_command" "$filename")"

preview='git show --color=always %s'
if command -v delta &>/dev/null; then
  preview_cmd="$(printf "$preview" "--follow {1} -- \"$filename\" | delta")"
  preview_all="$(printf "$preview" '{1} | delta ')"
else
  preview_cmd="$(printf "$preview" "--follow -- \"$filename\"")"
  preview_all="$(printf "$preview" '{1}')"
fi
preview_file="$(printf "$preview" "{1}:\"$filename\"")"
preview_graph='git log --color=always --oneline --decorate --graph {1}'

if command -v 'bat' &>/dev/null; then
  bat_style="${BAT_STYLE:-numbers,header}"
  preview_file="$preview_file | bat --color=always --style=$bat_style --file-name \"$filename\""
fi

# Call fzf
mapfile -t commits < <(fzf \
    --ansi --cycle --multi \
    --bind 'alt-a:select-all' \
    --bind 'alt-c:clear-query' \
    --bind 'alt-d:deselect-all' \
    --bind 'alt-f:first' \
    --bind 'alt-l:last' \
    --bind 'alt-up:preview-page-up,alt-down:preview-page-down' \
    --bind 'ctrl-^:toggle-preview' \
    --bind 'ctrl-s:toggle-sort' \
    --bind 'shift-up:preview-up,shift-down:preview-down' \
    --bind "start:reload($source_command)" \
    --bind "ctrl-a:preview:$preview_all" \
    --bind "ctrl-d:preview:$preview_cmd" \
    --bind "ctrl-f:preview:$preview_file" \
    --bind "ctrl-g:preview:$preview_graph" \
    --bind "ctrl-y:execute-silent:$copy" \
    --expect=ctrl-o,ctrl-e \
    --header "ctrl-a: Full patch | ctrl-d: File patch | ctrl-f: File | ctrl-y: Copy hashes" \
    --history="$history_file" \
    --input-border \
    --layout=reverse \
    --min-height 20 --border \
    --preview "$preview_cmd" \
    --prompt 'File History> ' \
    "${fzf_args[@]}" |
  awk '{ print $1 }'
)

# If no commits, exit
if [ -z "${commits[1]}" ]; then
  exit
fi

expected_key="${commits[0]}"

print_patches () {
  git show "${commits[@]:1}"
}

open_editor () {
  local tmpfile="$(mktemp)"
  git show "${commits[@]:1}" > "$tmpfile"

  # On (n)vim editor set filetype
  if [[ "$editor" =~ ^n?vim?$ ]]; then
    exec "$editor" -c ":filetype detect" "$tmpfile"
  else
    exec "$editor" "$tmpfile"
  fi
}

if [ "$expected_key" = 'ctrl-o' ]; then
  print_patches
  exit
fi

if [ "$expected_key" = 'ctrl-e' ]; then
  open_editor
  exit
fi

if [ "$print_patches" = true ]; then
  print_patches
  exit
fi

if [ "$open" = true ]; then
  open_editor
  exit
fi

# Print selected hashes
printf '%s\n' "${commits[@]:1}"

