; Easy Window Dragging -- KDE style (requires XP/2k/NT) -- by Jonny
; https://www.autohotkey.com
; This script makes it much easier to move or resize a window:
; 1) Hold down the ALT key and LEFT-click anywhere inside a window to drag it to a new location
; 2) Hold down ALT and RIGHT-click-drag anywhere inside a window to easily resize it
; 3) Press ALT twice, but before releasing it the second time,
; left-click to minimize the window under the mouse cursor, right-click
; to maximize it, or middle-click to close it.

; This script was inspired by and built on many like it
; in the forum. Thanks go out to ck, thinkstorm, Chris,
; and aurelian for a job well done.

; Change history:
; November 07, 2006: Optimized resizing code in !RButton, courtesy of bluedawn.
; February 05, 2006: Fixed double-alt (the ~Alt hotkey) to work with latest versions of AHK.

; The Double-Alt modifier is activated by pressing
; Alt twice, much like a double-click. Hold the second
; press down until you click.
;
; The shortcuts:
;  Alt + Left Button  : Drag to move a window.
;  Alt + Right Button : Drag to resize a window.
;  Double-Alt + Left Button   : Minimize a window.
;  Double-Alt + Right Button  : Maximize/Restore a window.
;  Double-Alt + Middle Button : Close a window.
;
; You can optionally release Alt after the first
; click rather than holding it down the whole time.

If (VerCompare(A_AhkVersion, "<2.0.2"))
{
    Result := MsgBox("This script may not work property with your version of AutoHotkey. Continue?",,20)

    if Result = "No"
      ExitApp()
}

; DoubleAlt := false
; KDE_id := Null
; KDE_X1 := 0
; KDE_Y1 := 0
; KDE_X2 := 0
; KDE_Y2 := 0
; KDE_WinX1 := 0
; KDE_WinY1 := 0
; KDE_WinX2 := 0
; KDE_WinY2 := 0

; This is the setting that runs smoothest on my
; system. Depending on your video card and cpu
; power, you may want to raise or lower this value.
SetWinDelay(2)

CoordMode("Mouse")
return

!LButton::
{
  global DoubleAlt
  global KDE_id
  global KDE_X1
  global KDE_Y1
  global KDE_X2
  global KDE_Y2
  global KDE_WinX1
  global KDE_WinY1
  global KDE_WinX2
  global KDE_WinY2

  If (DoubleAlt)
  {
      MouseGetPos(,, &KDE_id)
      ; This message is mostly equivalent to WinMinimize,
      ; but it avoids a bug with PSPad.
      PostMessage(0x112, 0xf020,,, "ahk_id " KDE_id)
      DoubleAlt := false
      return
  }

  ; Get the initial mouse position and window id, and
  ; abort if the window is maximized.
  MouseGetPos(&KDE_X1, &KDE_Y1, &KDE_id)
  KDE_Win := WinGetMinMax("ahk_id " KDE_id)
  If KDE_Win
      return
  ; Get the initial window position.
  WinGetPos(&KDE_WinX1, &KDE_WinY1,,, "ahk_id " KDE_id)
  Loop
  {
    KDE_Button := GetKeyState("LButton", "P") ; Break if button has been released.
    If !KDE_Button
        break
    MouseGetPos(&KDE_X2, &KDE_Y2) ; Get the current mouse position.
    KDE_X2 -= KDE_X1 ; Obtain an offset from the initial mouse position.
    KDE_Y2 -= KDE_Y1
    KDE_WinX2 := (KDE_WinX1 + KDE_X2) ; Apply this offset to the window position.
    KDE_WinY2 := (KDE_WinY1 + KDE_Y2)
    WinMove(KDE_WinX2, KDE_WinY2,,, "ahk_id " KDE_id) ; Move the window to the new position.
  }
}

!RButton::
{
  global DoubleAlt
  global KDE_id
  global KDE_X1
  global KDE_Y1
  global KDE_X2
  global KDE_Y2
  global KDE_WinX1
  global KDE_WinY1
  global KDE_WinX2
  global KDE_WinY2

  If DoubleAlt
  {
    MouseGetPos(,, &KDE_id)
    ; Toggle between maximized and restored state.
    KDE_Win := WinGetMinMax("ahk_id " KDE_id)
    If KDE_Win
        WinRestore("ahk_id " KDE_id)
    Else
        WinMaximize("ahk_id " KDE_id)
    DoubleAlt := false
    return
  }
  ; Get the initial mouse position and window id, and
  ; abort if the window is maximized.
  MouseGetPos(&KDE_X1, &KDE_Y1, &KDE_id)
  KDE_Win := WinGetMinMax("ahk_id " KDE_id)
  If KDE_Win
    return
  ; Get the initial window position and size.
  WinGetPos(&KDE_WinX1, &KDE_WinY1, &KDE_WinW, &KDE_WinH, "ahk_id " KDE_id)
  ; Define the window region the mouse is currently in.
  ; The four regions are Up and Left, Up and Right, Down and Left, Down and Right.
  If (KDE_X1 < KDE_WinX1 + KDE_WinW / 2)
    KDE_WinLeft := 1
  Else
    KDE_WinLeft := -1
  If (KDE_Y1 < KDE_WinY1 + KDE_WinH / 2)
    KDE_WinUp := 1
  Else
    KDE_WinUp := -1
  Loop
  {
    KDE_Button := GetKeyState("RButton", "P") ; Break if button has been released.
    If !KDE_Button
        break
    MouseGetPos(&KDE_X2, &KDE_Y2) ; Get the current mouse position.
    ; Get the current window position and size.
    WinGetPos(&KDE_WinX1, &KDE_WinY1, &KDE_WinW, &KDE_WinH, "ahk_id " KDE_id)
    KDE_X2 -= KDE_X1 ; Obtain an offset from the initial mouse position.
    KDE_Y2 -= KDE_Y1
    ; Then, act according to the defined region.
    WinMove(
      KDE_WinX1 + (KDE_WinLeft+1)/2*KDE_X2  ; X of resized window
      , KDE_WinY1 +   (KDE_WinUp+1)/2*KDE_Y2  ; Y of resized window
      , KDE_WinW  -     KDE_WinLeft  *KDE_X2  ; W of resized window
      , KDE_WinH  -       KDE_WinUp  *KDE_Y2  ; H of resized window
      , "ahk_id " KDE_id
    )
    KDE_X1 := (KDE_X2 + KDE_X1) ; Reset the initial position for the next iteration.
    KDE_Y1 := (KDE_Y2 + KDE_Y1)
  }
}

; "Alt + MButton" may be simpler, but I
; like an extra measure of security for
; an operation like this.
!MButton::
{
  global DoubleAlt
  global KDE_id
  global KDE_X1
  global KDE_Y1
  global KDE_X2
  global KDE_Y2
  global KDE_WinX1
  global KDE_WinY1
  global KDE_WinX2
  global KDE_WinY2

  If DoubleAlt
  {
      MouseGetPos(,, &KDE_id)
      WinClose("ahk_id " KDE_id)
      DoubleAlt := false
      return
  }
}

; This detects "double-clicks" of the alt key.
~Alt::
{
  global DoubleAlt
  global KDE_id
  global KDE_X1
  global KDE_Y1
  global KDE_X2
  global KDE_Y2
  global KDE_WinX1
  global KDE_WinY1
  global KDE_WinX2
  global KDE_WinY2

  DoubleAlt := A_PriorHotkey = "~Alt" && A_TimeSincePriorHotkey < 400
  Sleep(0)
  KeyWait("Alt") ; This prevents the keyboard's auto-repeat feature from interfering.
}
