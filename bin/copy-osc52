#!/bin/sh

# Check if the terminal supports colors
if tput setaf 1 >/dev/null 2>&1; then
  COLOR_INFO="$(tput setaf 4)"    # Bright Blue for general info
  COLOR_WARN="$(tput setaf 3)"    # Yellow for warnings
  COLOR_SUCCESS="$(tput setaf 2)" # Green for success
  COLOR_ERROR="$(tput setaf 1)"   # Red for errors
  COLOR_RESET="$(tput sgr0)"
else
  COLOR_INFO=""
  COLOR_WARN=""
  COLOR_SUCCESS=""
  COLOR_ERROR=""
  COLOR_RESET=""
fi

# COLOR_INFO="$(git config --get-color '' 'blue black bold')"
# COLOR_WARN="$(git config --get-color '' 'yellow black bold')"
# COLOR_SUCCESS="$(git config --get-color '' 'green black bold')"
# COLOR_ERROR="$(git config --get-color '' 'red black bold')"
# COLOR_RESET="$(git config --get-color '' 'reset')"

# Function to print messages with appropriate colors
echoinfo() {
  printf "%s%s%s\n" "$COLOR_INFO" "$1" "$COLOR_RESET" >&2
}

echowarn() {
  printf "%s%s%s\n" "$COLOR_WARN" "$1" "$COLOR_RESET" >&2
}

echosuccess() {
  printf "%s%s%s\n" "$COLOR_SUCCESS" "$1" "$COLOR_RESET" >&2
}

echoerror() {
  printf "%s%s%s\n" "$COLOR_ERROR" "$1" "$COLOR_RESET" >&2
}

# Display help message
show_help() {
  printf "Usage: %s [OPTION]\n" "$0"
  printf "Copy input text to the clipboard using OSC52 escape sequence.\n\n"
  printf "Options:\n"
  printf "  -h, --help    Show this help message and exit\n\n"
  printf "Example:\n"
  printf "  echo 'Hello' | %s  # Copy 'Hello' to the clipboard\n" "$0"
  printf "  %s                # Enter interactive mode to copy text\n" "$0"
  exit 0
}

# Check for help option
case "$1" in
-h | --help) show_help ;;
esac

# Check if base64 exists and determine correct flag (-w0 for GNU, -b0 for BSD/macOS)
if ! command -v base64 >/dev/null 2>&1; then
  echoerror "‚ùå Error: base64 command not found."
  exit 1
fi

if command -v bat >/dev/null 2>&1; then
  CAT="bat"
else
  CAT="cat"
fi

if echo test | base64 -w0 >/dev/null 2>&1; then
  BASE64_CMD="base64 -w0"
elif echo test | base64 -b0 >/dev/null 2>&1; then
  BASE64_CMD="base64 -b0"
else
  echoerror "‚ùå Error: Unsupported base64 version."
  exit 1
fi

# Detect if input is interactive or piped
if [ -t 0 ]; then
  echoinfo "üìã Enter text to copy (Ctrl+D to finish):"
  input_content=$($CAT)
else
  input_content=$($CAT)
fi

if [ -z "$input_content" ]; then
  echowarn "‚ö†Ô∏è  Empty input received!"
fi

# Copy to clipboard using ANSI OSC52 escape sequence
CONTENT_BASE64="$(printf "%s" "$input_content" | $BASE64_CMD | tr -d '\n')"
printf "\033]52;c;%s\a" "$CONTENT_BASE64"

# if [ -z "$input_content" ]; then
#   echowarn "üßπ Cleaned the clipboard!"
# else
#   echosuccess "‚úÖ Text copied to clipboard!"
# fi

